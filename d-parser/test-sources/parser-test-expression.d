// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (INFIX["*="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (INFIX["*="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) EXP_LITERAL_INTEGER))))
int x = b *= c *= 2;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (INFIX["="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (INFIX["="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) EXP_LITERAL_INTEGER))))
int x = b = c = 2;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (INFIX["-="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (INFIX[">>="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) EXP_LITERAL_INTEGER))))
int x = b -= c >>= 2;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (EXP_CONDITIONAL (EXP_REFERENCE (REF_IDENTIFIER Identifier))  (EXP_REFERENCE (REF_IDENTIFIER Identifier)) EXP_LITERAL_INTEGER)))
int x = b ? c : 2;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (INFIX["="] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (EXP_CONDITIONAL (EXP_REFERENCE (REF_IDENTIFIER Identifier))  (EXP_REFERENCE (REF_IDENTIFIER Identifier)) EXP_LITERAL_INTEGER))))
int x = a = b ?  c : 2;
// (DEF_VAR (REF_IDENTIFIER 'bool') DEF_SYMBOL (INITIALIZER_EXP (INFIX["||"] (INFIX["&&"] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (EXP_REFERENCE (REF_IDENTIFIER Identifier))) (EXP_REFERENCE (REF_IDENTIFIER Identifier)))))
bool r = a && b || c;
// BUG! The descent.compiler produces different AST but this should be right according to the reference.
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP (INFIX["||"] (INFIX[">"] (INFIX["*"] EXP_LITERAL_INTEGER (EXP_REFERENCE (REF_IDENTIFIER Identifier))) (INFIX["|"] EXP_LITERAL_INTEGER["7"] EXP_LITERAL_INTEGER["3"])) EXP_LITERAL_INTEGER["5"])))
int r = 2 * x > 7 | 3 || 5;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (PREFIX["!"] (PREFIX["&"] (EXP_REFERENCE (REF_IDENTIFIER Identifier)))))))
auto r = !&a;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (REF_IDENTIFIER Identifier)))))
auto r = new A;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (TYPE_STATIC_ARRAY EXP_LITERAL_INTEGER (REF_IDENTIFIER 'int'))))))
auto r = new int[10];
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))))))
auto r = new x.y;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (TYPE_STATIC_ARRAY EXP_LITERAL_INTEGER (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier)))))))
auto r = new x.y[10];
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (ARG_LIST EXP_LITERAL_INTEGER) (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))))))
auto r = new (2) x.y;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_NEW (ARG_LIST EXP_LITERAL_INTEGER) (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier)) (ARG_LIST EXP_LITERAL_INTEGER)))))
auto r = new (2) x.y(2);
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CAST (CAST_QUALIFIER 'const' 'shared') (EXP_REFERENCE (REF_IDENTIFIER Identifier))))))
auto r = cast(const shared) a;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CAST (REF_IDENTIFIER 'int') (EXP_REFERENCE (REF_IDENTIFIER Identifier))))))
auto r = cast(int) a;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CAST (EXP_REFERENCE (REF_IDENTIFIER Identifier))))))
auto r = cast() a;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))))))
auto r = a.b;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CALL (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))) ARG_LIST))))
auto r = a.b();
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CALL (EXP_CALL (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))) ARG_LIST) ARG_LIST))))
auto r = a.b()();
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CALL (TEMPLATE_INSTANCE (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))) EXP_LITERAL_INTEGER["5"]) (ARG_LIST EXP_LITERAL_INTEGER["3"])))))
auto r = a.b!5(3);
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_CALL (TEMPLATE_INSTANCE (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))) (REF_IDENTIFIER 'char')) (ARG_LIST EXP_LITERAL_CHAR)))))
auto r = a.b!char('c');
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (INFIX["+"] (INFIX["*"] (INFIX["+"] EXP_LITERAL_INTEGER EXP_LITERAL_INTEGER)  EXP_LITERAL_INTEGER) EXP_LITERAL_INTEGER))))
auto r = (3 + 4) * 2 + 5;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_LITERAL_FUNCTION (PARAMETER_LIST (FUNC_PARAM (REF_IDENTIFIER 'int') DEF_SYMBOL)) STMT_BLOCK))))
auto r = function(int x) { };
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_LITERAL_IMPORTEDSTRING EXP_LITERAL_STRING))))
auto r = import ("foo.txt");
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_TYPEID (POSTFIX["++"] (EXP_REFERENCE (REF_IDENTIFIER Identifier)))))))
auto r = typeid(i++);
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_LITERAL_FUNCTION (STMT_BLOCK (STMT_RETURN EXP_LITERAL_INTEGER))))))
auto r = x => 1;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_LITERAL_FUNCTION (PARAMETER_LIST (FUNC_PARAM (REF_IDENTIFIER 'int') DEF_SYMBOL)) (STMT_BLOCK (STMT_RETURN (INFIX["*"] (EXP_REFERENCE (REF_IDENTIFIER Identifier)) (EXP_REFERENCE (REF_IDENTIFIER Identifier)))))))))
auto r = (int x) => x * x;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_REFERENCE (REF_QUALIFIED (REF_IDENTIFIER Identifier))))))
auto r = .a;
// (STORAGE_CLASS (AUTO_VAR DEF_SYMBOL (INITIALIZER_EXP (EXP_REFERENCE (REF_QUALIFIED (REF_QUALIFIED (REF_IDENTIFIER Identifier)) (REF_IDENTIFIER Identifier))))))
auto r = .a.v;