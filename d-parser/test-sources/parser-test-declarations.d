// (MODULE_DECLARATION (MODULE_SYMBOL Identifier["x"]))
module x;
// (DECL_IMPORT (IMPORT_CONTENT (REF_MODULE Identifier)))
import other;
// (DECL_IMPORT (IMPORT_CONTENT (REF_MODULE Identifier)) 'static')
static import static_other;
// (DECL_IMPORT (IMPORT_CONTENT (REF_MODULE Identifier)) (IMPORT_CONTENT (REF_MODULE Identifier)))
import mod1, mod2;
// (DECL_IMPORT (IMPORT_ALIAS (REF_MODULE Identifier) (REF_MODULE Identifier Identifier)))
import m = other.mod;
// (DECL_IMPORT (IMPORT_BINDING (IMPORT_CONTENT (REF_MODULE Identifier)) Identifier))
import a : b;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL)
int a;
// (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL (INITIALIZER_EXP EXP_LITERAL_INTEGER))
int b = 2;
// (DEF_VAR (REF_QUALIFIED (REF_QUALIFIED (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier)) (REF_IDENTIFIER Identifier)) DEF_SYMBOL)
x.y.z d;
// (DEF_VAR (TEMPLATE_INSTANCE (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier)) DEF_SYMBOL)
a!b d;
// (DEF_VAR (TEMPLATE_INSTANCE (REF_IDENTIFIER Identifier) (AST_NEONODE_ARRAYVIEW (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier))) DEF_SYMBOL)
a!(b, c) d;
// (DEF_VAR (REF_QUALIFIED (REF_IDENTIFIER Identifier) (TEMPLATE_INSTANCE (REF_IDENTIFIER Identifier) (AST_NEONODE_ARRAYVIEW (REF_IDENTIFIER Identifier) (REF_IDENTIFIER Identifier)))) DEF_SYMBOL)
a.x!(b, c) d;
// (DEF_VAR (TYPE_POINTER (REF_IDENTIFIER 'int')) DEF_SYMBOL)
int* a;
// (DEF_VAR (TYPE_DYN_ARRAY (REF_IDENTIFIER 'int')) DEF_SYMBOL)
int[] a;
// (DEF_VAR (TYPE_STATIC_ARRAY EXP_LITERAL_INTEGER (REF_IDENTIFIER 'int')) DEF_SYMBOL)
int[10] d;
// (DEF_VAR (REF_TYPE_SLICE EXP_LITERAL_INTEGER EXP_LITERAL_INTEGER (REF_IDENTIFIER 'int')) DEF_SYMBOL)
int[1..2] d;
// (STORAGE_CLASS["const"] (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL))
const int a;
// (STORAGE_CLASS["static"] (STORAGE_CLASS["const"] (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL)))
static const int a;
// (DEF_FUNC DEF_SYMBOL (REF_IDENTIFIER 'int') PARAMETER_LIST STMT_BLOCK)
int main() { }
// (STORAGE_CLASS["const"] (AUTO_VAR DEF_SYMBOL["a"] (INITIALIZER_EXP EXP_LITERAL_INTEGER["1"])))
const a = 1;
// (ENUM_DECLARATION DEF_SYMBOL (ENUM_MEMBER DEF_SYMBOL) (ENUM_MEMBER DEF_SYMBOL) (ENUM_MEMBER DEF_SYMBOL))
enum X { A, B, C }
// (ENUM_DECLARATION DEF_SYMBOL)
enum B;
// (ENUM_DECLARATION (ENUM_MEMBER DEF_SYMBOL EXP_LITERAL_INTEGER) (ENUM_MEMBER DEF_SYMBOL EXP_LITERAL_INTEGER) (ENUM_MEMBER DEF_SYMBOL EXP_LITERAL_INTEGER))
enum { A =1, B=4, C=12 }
// (ENUM_DECLARATION DEF_SYMBOL (REF_IDENTIFIER 'int'))
enum Enum : int;
// (CLASS_DECLARATION DEF_SYMBOL (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL))  
class X { int b; }
// (CLASS_DECLARATION DEF_SYMBOL (BASE_CLASSES (BASE_CLASS (REF_IDENTIFIER Identifier)) (BASE_CLASS (REF_IDENTIFIER Identifier))) (DEF_FUNC DEF_SYMBOL (REF_IDENTIFIER 'int') PARAMETER_LIST STMT_BLOCK))  
class X : Y, Z { int b() { } }
// (CLASS_DECLARATION DEF_SYMBOL (DEF_CTOR["new"] PARAMETER_LIST STMT_BLOCK) (DEF_CTOR["delete"] PARAMETER_LIST STMT_BLOCK))  
class X { new () {} delete() {} }
// (CLASS_DECLARATION DEF_SYMBOL (DEF_FUNC DEF_SYMBOL (REF_IDENTIFIER 'int') PARAMETER_LIST STMT_BLOCK) (INVARIANT STMT_BLOCK))
class X { int b() { } invariant() {} }
// (INTERFACE_DECLARATION DEF_SYMBOL (DEF_FUNC DEF_SYMBOL (REF_IDENTIFIER 'int') PARAMETER_LIST))
interface I1 { int func1(); }
// (INTERFACE_DECLARATION DEF_SYMBOL (BASE_CLASSES (BASE_CLASS (REF_IDENTIFIER Identifier))) (DEF_FUNC DEF_SYMBOL (REF_IDENTIFIER 'int') PARAMETER_LIST))
interface I2 : I1 { int func2(); }
// (STRUCT_DECLARATION DEF_SYMBOL (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL) (DEF_CTOR["new"] PARAMETER_LIST STMT_BLOCK))
struct S1 { int fieldA; new () {} }
// (UNION_DECLARATION DEF_SYMBOL (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL) (DEF_VAR (REF_IDENTIFIER 'float') DEF_SYMBOL))
union U1 { int fieldA; float fieldB; }
// (CLASS_DECLARATION DEF_SYMBOL (DEF_CTOR["this"] (PARAMETER_LIST (FUNC_PARAM (REF_IDENTIFIER 'int') DEF_SYMBOL)) STMT_BLOCK))
class C1 { this(int a) { } }
// (CONDITIONAL_DECL (CONDITIONAL_COMPILATION_CONDITION["version"] SYMBOL["X"]) (DECLARATION_BLOCK (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL)))
version (X) { int a; }
// (CONDITIONAL_DECL (CONDITIONAL_COMPILATION_CONDITION["debug"] SYMBOL["Y"]) (DECLARATION_BLOCK (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL)) (DECLARATION_BLOCK (DEF_VAR (REF_IDENTIFIER 'float') DEF_SYMBOL)))
debug (Y) int a; else float a;
// (CONDITIONAL_DECL (CONDITIONAL_COMPILATION_CONDITION["static if"] EXP_LITERAL_INTEGER["1"]) (DECLARATION_BLOCK (DEF_VAR (REF_IDENTIFIER 'int') DEF_SYMBOL)) (DECLARATION_BLOCK (DEF_VAR (REF_IDENTIFIER 'float') DEF_SYMBOL)))
static if (1) int a; else float a;
// (CONDITIONAL_DECL (CONDITIONAL_COMPILATION_CONDITION["version"] SYMBOL["X"]) (DECLARATION_BLOCK (DV_SPEC["version"] SYMBOL["Y"])))
version (X) { version = Y; }
// (CONDITIONAL_DECL (CONDITIONAL_COMPILATION_CONDITION["version"] SYMBOL["BAR"]) DECLARATION_BLOCK (DECLARATION_BLOCK (STATIC_ASSERT EXP_LITERAL_INTEGER)))
version (BAR) { } else { static assert(0); }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_TYPE DEF_SYMBOL)) DECLARATION_BLOCK)
template TFoo(T) { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_TYPE DEF_SYMBOL (TYPE_DYN_ARRAY (REF_IDENTIFIER Identifier)))) DECLARATION_BLOCK)
template TFoo(T : T[]) { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_TYPE DEF_SYMBOL (REF_IDENTIFIER 'char'))) DECLARATION_BLOCK)
template TFoo(T : char) { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_TYPE DEF_SYMBOL) (TEMPLATE_PARAM_TYPE DEF_SYMBOL) (TEMPLATE_PARAM_TYPE DEF_SYMBOL)) DECLARATION_BLOCK)
template TFoo(T,U,V) { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_VALUE DEF_SYMBOL (REF_IDENTIFIER Identifier))) DECLARATION_BLOCK)
template foo(string s) { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_VALUE DEF_SYMBOL (REF_IDENTIFIER Identifier) EXP_LITERAL_STRING EXP_LITERAL_STRING)) DECLARATION_BLOCK)
template foo(string s : "yeh" = "hey") { }
// (TEMPLATE_DECLARATION DEF_SYMBOL (TEMPLATE_PARAM_LIST (TEMPLATE_PARAM_ALIAS DEF_SYMBOL)) DECLARATION_BLOCK)
template Foo(alias X) {  }
// (TEMPLATE_MIXIN_DECLARATION (TEMPLATE_DECLARATION DEF_SYMBOL TEMPLATE_PARAM_LIST DECLARATION_BLOCK))
mixin template Foo() {}
// (MIXIN_DECLARATION EXP_LITERAL_STRING)
mixin("class X {}");
// (DEF_VAR (REF_QUALIFIED (REF_IDENTIFIER Identifier)) DEF_SYMBOL)
.a b;
// (DEF_VAR (TEMPLATE_INSTANCE (REF_IDENTIFIER Identifier) (AST_NEONODE_ARRAYVIEW (REF_QUALIFIED (REF_IDENTIFIER Identifier)))) DEF_SYMBOL)
a!(.b) c;
